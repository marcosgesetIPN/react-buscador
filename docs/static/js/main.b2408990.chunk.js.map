{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFechGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GitGrid","loading","state","setstate","useEffect","then","useFechGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAST,EACTU,SAnBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAM1Ca,QAAQC,IAAIR,GAfO,kBAiBZA,GAjBY,4CAAH,sDCCPS,EAAc,SAAC,GAAkB,IAAjBL,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIhC,OAFAa,QAAQC,IAAI,CAACJ,QAAOV,QAGhB,yBAAKgB,UAAY,0CACb,yBAAKC,IAAKjB,EAAKkB,IAAKR,EAAOM,UAAU,YACrC,2BAAIN,KCiGDS,EAtBQ,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,EC7Db,SAACA,GAAa,IAAD,EACTd,mBAAS,CAE/BqB,KAAM,GACNe,SAAS,IAJsB,mBAC5BC,EAD4B,KACrBC,EADqB,KAoBnC,OAZAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAhB,GACFc,EAAS,CACLjB,KAAMG,EACNY,SAAS,SAGtB,CAACtB,IAIGuB,ED2CiBI,CAAY3B,GAA7BO,EAF4B,EAE5BA,KAAMe,EAFsB,EAEtBA,QAEb,OACI,oCACI,4BAAKtB,GACJsB,GAAW,sCACZ,yBAAKJ,UAAY,aAETX,EAAKE,KAAI,SAAAC,GAAG,OACR,kBAAC,EAAD,eACIkB,IAAOlB,EAAIC,IACPD,UExDjBmB,EArCa,WAAK,MAEO3C,mBAAS,CAAC,SAFjB,mBAEtB4C,EAFsB,KAEV7C,EAFU,KAgB7B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAcA,cAAeA,IAC7B,6BAEA,4BAEQ6C,EAAWrB,KAAI,SAAAT,GAEX,OAAO,kBAAC,EAAD,CACC4B,IAAO5B,EACPA,SAAYA,U,MC3B5C+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.b2408990.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'; \r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    //se lo que la persona escribe\r\n    const [inputValue, setInputValue] = useState(''); //sino se pone nada es undefined\r\n\r\n    const handleInputChange = (e) => { //elemento\r\n        //console.log(e.target.value); //obteniendo el valor\r\n        setInputValue(e.target.value); //guarda lo que uno escribe\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //evitar que haga un refresh al darle enter\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }     \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange= {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","   //peticion http\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=v8CJQqmIDMeyuutg19l6K2xxU1VR3d0E`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            //con el ? preguntamos si vienen las imagenes\r\n        }\r\n\r\n    });\r\n\r\n    console.log(gifs);\r\n\r\n    return gifs;\r\n}\r\n\r\n//esta funcion resuelve una promesa la cual regresa la coleccion de las imagenes","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    console.log({title, url});\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__zoomIn\">\r\n            <img src={url} alt={title} className=\"tamanio\"/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFechGifs } from '../hooks/useFechGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n/*\r\nexport const GitGrid = ({category}) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    //se ejecuta el codigo una sola vez cuando el componente es renderizado la primera vez\r\n    useEffect(() =>{\r\n        getGifs(category)\r\n            .then(imgs=>{\r\n                setImages(imgs);\r\n            })\r\n    }, [category]) //se manda la categoria porque si llegase a cambiar la tiene que mandar para que se modifique\r\n\r\n    /*\r\n    SE MUEVE ESTO AL getGifs\r\n    //peticion http\r\n    const getGifs = async() => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=v8CJQqmIDMeyuutg19l6K2xxU1VR3d0E`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n                //con el ? preguntamos si vienen las imagenes\r\n            }\r\n\r\n        });\r\n\r\n        console.log(gifs);\r\n\r\n        setImages(gifs);\r\n    } */\r\n\r\n    //getGifs();\r\n    /*\r\n    con el nuevo componente de GitGridItem vamos a quitar esto\r\n    y se remplaza por lo de a bajo\r\n    return (\r\n        <>\r\n           <h3>{category}</h3> \r\n\r\n           <ol>\r\n                 {\r\n                    images.map(img=>{\r\n                        return (\r\n                            <li key={img.id}>\r\n                                {img.title}\r\n                            </li>\r\n                        )\r\n                    })\r\n                        \r\n                }\r\n           </ol>\r\n        </>\r\n    ) \r\n    ---------\r\n\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            <div className = \"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key = {img.id}\r\n                            {...img}\r\n                        />\r\n                    ))     \r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n} */\r\n\r\n//nueva forma\r\n\r\nexport const GitGrid = ({category}) => {\r\n\r\n    const {data, loading} = useFechGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            {loading && <p>Loading</p>}\r\n            <div className = \"card-grid\">\r\n                {\r\n                    data.map(img => (\r\n                        <GifGridItem\r\n                            key = {img.id}\r\n                            {...img}\r\n                        />\r\n                    ))     \r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GitGrid;","import { useEffect } from 'react';\r\nimport {useState} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n/* ejemplo\r\nexport const useFechGifs =() =>{\r\n    const [state, setstate] = useState({\r\n        //su estado inicial es este objeto que le pasamos\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    setTimeout(() => {\r\n        setstate({\r\n            data: [1, 2, 3, 4],\r\n            loading: false\r\n        })\r\n    }, 2500);\r\n\r\n    return state; //es la data y el loading\r\n} */\r\n\r\nexport const useFechGifs =(category) =>{\r\n    const [state, setstate] = useState({\r\n        //su estado inicial es este objeto que le pasamos\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //los efectos no pueden ser sincronos\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(img=>{ //esto es una promesa\r\n                setstate({\r\n                    data: img,\r\n                    loading: false\r\n                }); \r\n            })\r\n    }, [category]) //se dispara cuando la categoria cambie\r\n\r\n    \r\n\r\n    return state; //es la data y el loading\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GitGrid from './components/GitGrid';\r\n\r\nexport const GitExpertApp = () =>{\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon ball'];\r\n    const [categories, setCategories] = useState(['Nike']);\r\n\r\n    /*\r\n    const handleAdd = () =>{\r\n        //extrae las categorias anteriores y agrega esta\r\n        setCategories([...categories, 'malcom']); \r\n        \r\n        /* con un callback se puede hacer\r\n        setCategories(cats => [...cats, 'HunterX']);\r\n        \r\n    } */\r\n\r\n    //AddCategory le estamos mandado una propiedad y le mando la referencia\r\n    //{setcategories} es lareferencia \r\n    return(\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            <AddCategory  setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        /* return <li key = {category}> {category} </li> */\r\n                        return <GitGrid \r\n                                key = {category}\r\n                                category = {category}\r\n                            />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GitExpertApp; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}